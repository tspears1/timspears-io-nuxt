// ---------------------------------------------------------------------------
// Shorthand method for common multi-value declarations
// ---------------------------------------------------------------------------

@use "@/assets/scss/abstracts/functions/" as *;

@mixin shorthander($position, $value) {
    $position-prefix: '';

    @if $position == 'margin' or $position == 'padding' {
        $position-prefix: $position + '-';
    } @else if $position == 'null' {
        // do nothing
    } @else {
        $position-prefix: 'inset-';
        position: $position;
    }

    @if length($value) == 1 and $value != 'n' and $value != 'x' and $value != 'null' {
        #{$position-prefix}block-start: auto($value);
        #{$position-prefix}inline-end: auto($value);
        #{$position-prefix}block-end: auto($value);
        #{$position-prefix}inline-start: auto($value);
    }

    @if length($value) == 2 {
        $value-y: nth($value, 1);
        $value-x: nth($value, 2);
        @if $value-y != 'n' and $value-y != 'x' and $value-y != 'null' {
            #{$position-prefix}block-start: auto($value-y);
            #{$position-prefix}block-end: auto($value-y);
        }
        @if $value-x != 'n' and $value-x != 'x' and $value-x != 'null' {
            #{$position-prefix}inline-start: auto($value-x);
            #{$position-prefix}inline-end: auto($value-x);
        }
    }

    @if length($value) == 3 {
        $value-y-top: nth($value, 1);
        $value-x: nth($value, 2);
        $value-y-bottom: nth($value, 3);

        @if $value-y-top != 'n' and $value-y-top != 'x' and $value-y-top != 'null' {
            #{$position-prefix}block-start: auto($value-y-top);
        }
        @if $value-x != 'n' and $value-x != 'x' and $value-x != 'null' {
            #{$position-prefix}inline-end: auto($value-x);
            #{$position-prefix}inline-start: auto($value-x);
        }
        @if $value-y-bottom != 'n' and $value-y-bottom != 'x' and $value-y-bottom != 'null' {
            #{$position-prefix}block-end: auto($value-y-bottom);
        }
    }

    @if length($value) == 4 {
        $value-top: nth($value, 1);
        $value-right: nth($value, 2);
        $value-bottom: nth($value, 3);
        $value-left: nth($value, 4);

        @if $value-top != 'n' and $value-top != 'x' and $value-top != 'null' {
            #{$position-prefix}block-start: auto($value-top);
        }
        @if $value-right != 'n' and $value-right != 'x' and $value-right != 'null' {
            #{$position-prefix}inline-end: auto($value-right);
        }
        @if $value-bottom != 'n' and $value-bottom != 'x' and $value-bottom != 'null' {
            #{$position-prefix}block-end: auto($value-bottom);
        }
        @if $value-left != 'n' and $value-left != 'x' and $value-left != 'null' {
            #{$position-prefix}inline-start: auto($value-left);
        }
    }
}

/* Absolute */
@mixin absolute($value) {
    @include shorthander(absolute, $value);
}

/* Fixed */
@mixin fixed($value) {
    @include shorthander(fixed, $value);

}

/* Sticky */
@mixin sticky($value) {
    @include shorthander(sticky, $value);
}

/* Relative */
@mixin relative($value) {
    @include shorthander(relative, $value);
}

/* Inset */
@mixin inset($value) {
    @include shorthander(inset, $value);
}

/* Padding */
@mixin padding($value) {
    @include shorthander(padding, $value);
}

/* Margin */
@mixin margin($value) {
    @include shorthander(margin, $value);
}
